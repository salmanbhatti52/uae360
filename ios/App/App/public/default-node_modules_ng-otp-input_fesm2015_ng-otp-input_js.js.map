{"version":3,"file":"default-node_modules_ng-otp-input_fesm2015_ng-otp-input_js.js","mappings":"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","sources":["./node_modules/ng-otp-input/fesm2015/ng-otp-input.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass KeyboardUtil {\r\n    static ifBackspaceOrDelete(event) {\r\n        return this.ifKey(event, 'Backspace;Delete;Del');\r\n    }\r\n    static ifRightArrow(event) {\r\n        return this.ifKey(event, 'ArrowRight;Right');\r\n    }\r\n    static ifLeftArrow(event) {\r\n        return this.ifKey(event, 'ArrowLeft;Left');\r\n    }\r\n    static ifSpacebar(event) {\r\n        return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key\r\n    }\r\n    static ifKey(event, keys) {\r\n        let keysToCheck = keys.split(';');\r\n        return keysToCheck.some(k => k === event.key);\r\n    }\r\n}\n\nclass KeysPipe {\r\n    transform(value) {\r\n        return Object.keys(value);\r\n    }\r\n}\r\n/** @nocollapse */ KeysPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeysPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\n/** @nocollapse */ KeysPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeysPipe, name: \"keys\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeysPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'keys'\r\n                }]\r\n        }] });\n\nclass NgOtpInputComponent {\r\n    constructor(keysPipe) {\r\n        this.keysPipe = keysPipe;\r\n        this.config = { length: 4 };\r\n        // tslint:disable-next-line: no-output-on-prefix\r\n        this.onInputChange = new EventEmitter();\r\n        this.inputControls = new Array(this.config.length);\r\n        this.componentKey = Math.random()\r\n            .toString(36)\r\n            .substring(2) + new Date().getTime().toString(36);\r\n    }\r\n    get inputType() {\r\n        var _a, _b;\r\n        return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.isPasswordInput)\r\n            ? 'password'\r\n            : ((_b = this.config) === null || _b === void 0 ? void 0 : _b.allowNumbersOnly)\r\n                ? 'tel'\r\n                : 'text';\r\n    }\r\n    ngOnInit() {\r\n        this.otpForm = new FormGroup({});\r\n        for (let index = 0; index < this.config.length; index++) {\r\n            this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n        }\r\n        this.otpForm.valueChanges.subscribe((v) => {\r\n            this.keysPipe.transform(this.otpForm.controls).forEach((k) => {\r\n                var val = this.otpForm.controls[k].value;\r\n                if (val && val.length > 1) {\r\n                    if (val.length >= this.config.length) {\r\n                        this.setValue(val);\r\n                    }\r\n                    else {\r\n                        this.rebuildValue();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            if (containerItem) {\r\n                const ele = containerItem.getElementsByClassName('otp-input')[0];\r\n                if (ele && ele.focus) {\r\n                    ele.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getControlName(idx) {\r\n        return `ctrl_${idx}`;\r\n    }\r\n    onKeyDown($event, inputIdx) {\r\n        if (KeyboardUtil.ifSpacebar($event)) {\r\n            $event.preventDefault();\r\n            return false;\r\n        }\r\n    }\r\n    onInput($event) {\r\n        let newVal = this.currentVal ? `${this.currentVal}${$event.target.value}` : $event.target.value;\r\n        if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {\r\n            $event.target.value = '';\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n            return;\r\n        }\r\n    }\r\n    onKeyUp($event, inputIdx) {\r\n        const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\r\n        const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\r\n        if (KeyboardUtil.ifRightArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(nextInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifLeftArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(prevInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifBackspaceOrDelete($event) && !$event.target.value) {\r\n            this.setSelected(prevInputId);\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        if (!$event.target.value) {\r\n            return;\r\n        }\r\n        if (this.ifValidKeyCode($event)) {\r\n            this.setSelected(nextInputId);\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    validateNumber(val) {\r\n        return val && /^\\d*\\.?\\d*$/.test(val);\r\n    }\r\n    appendKey(id) {\r\n        return `${id}_${this.componentKey}`;\r\n    }\r\n    setSelected(eleId) {\r\n        this.focusTo(eleId);\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele.setSelectionRange) {\r\n            setTimeout(() => {\r\n                ele.setSelectionRange(0, 1);\r\n            }, 0);\r\n        }\r\n    }\r\n    ifValidKeyCode(event) {\r\n        const inp = event.key;\r\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        return (isMobile ||\r\n            /[a-zA-Z0-9-_]/.test(inp) ||\r\n            (this.config.allowKeyCodes &&\r\n                this.config.allowKeyCodes.includes(event.keyCode)));\r\n    }\r\n    focusTo(eleId) {\r\n        const ele = document.getElementById(eleId);\r\n        if (ele) {\r\n            ele.focus();\r\n        }\r\n    }\r\n    // method to set component value\r\n    setValue(value) {\r\n        if (this.config.allowNumbersOnly && isNaN(value)) {\r\n            return;\r\n        }\r\n        this.otpForm.reset();\r\n        if (!value) {\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n        Array.from(value).forEach((c, idx) => {\r\n            if (this.otpForm.get(this.getControlName(idx))) {\r\n                this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n            }\r\n        });\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n            let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n            if (ele && ele.focus) {\r\n                ele.focus();\r\n            }\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    rebuildValue() {\r\n        var _a;\r\n        let val = '';\r\n        this.keysPipe.transform(this.otpForm.controls).forEach(k => {\r\n            if (this.otpForm.controls[k].value) {\r\n                let ctrlVal = this.otpForm.controls[k].value;\r\n                let isLengthExceed = ctrlVal.length > 1;\r\n                let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\r\n                ctrlVal = ctrlVal[0];\r\n                let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\r\n                if (isCaseTransformEnabled && transformedVal == ctrlVal) {\r\n                    isCaseTransformEnabled = false;\r\n                }\r\n                else {\r\n                    ctrlVal = transformedVal;\r\n                }\r\n                val += ctrlVal;\r\n                if (isLengthExceed || isCaseTransformEnabled) {\r\n                    this.otpForm.controls[k].setValue(ctrlVal);\r\n                }\r\n            }\r\n        });\r\n        if ((_a = this.formCtrl) === null || _a === void 0 ? void 0 : _a.setValue) {\r\n            this.formCtrl.setValue(val);\r\n        }\r\n        this.onInputChange.emit(val);\r\n        this.currentVal = val;\r\n    }\r\n    handlePaste(e) {\r\n        // Get pasted data via clipboard API\r\n        let clipboardData = e.clipboardData || window['clipboardData'];\r\n        if (clipboardData) {\r\n            var pastedData = clipboardData.getData('Text');\r\n        }\r\n        // Stop data actually being pasted into div\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        if (!pastedData || (this.config.allowNumbersOnly && !this.validateNumber(pastedData))) {\r\n            return;\r\n        }\r\n        this.setValue(pastedData);\r\n    }\r\n}\r\n/** @nocollapse */ NgOtpInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputComponent, deps: [{ token: KeysPipe }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgOtpInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: NgOtpInputComponent, selector: \"ng-otp-input\", inputs: { config: \"config\", formCtrl: \"formCtrl\" }, outputs: { onInputChange: \"onInputChange\" }, ngImport: i0, template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp id=\\\"otp_{{i}}_{{componentKey}}\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\", styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: [\"pattern\"] }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"disabled\", \"formControl\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"keys\": KeysPipe } });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    // tslint:disable-next-line: component-selector\r\n                    selector: 'ng-otp-input',\r\n                    templateUrl: './ng-otp-input.component.html',\r\n                    styleUrls: ['./ng-otp-input.component.scss']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: KeysPipe }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }], onInputChange: [{\r\n                type: Output\r\n            }], formCtrl: [{\r\n                type: Input\r\n            }] } });\n\nclass NgOtpInputModule {\r\n}\r\n/** @nocollapse */ NgOtpInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgOtpInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, declarations: [NgOtpInputComponent, KeysPipe], imports: [CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NgOtpInputComponent] });\r\n/** @nocollapse */ NgOtpInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, providers: [KeysPipe], imports: [[\r\n            CommonModule,\r\n            FormsModule,\r\n            ReactiveFormsModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule\r\n                    ],\r\n                    declarations: [NgOtpInputComponent, KeysPipe],\r\n                    exports: [NgOtpInputComponent],\r\n                    providers: [KeysPipe]\r\n                }]\r\n        }] });\n\nclass Config {\r\n}\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, Config as NgOtpInputConfig, NgOtpInputModule };\n"],"names":["i0","Pipe","EventEmitter","Component","Input","Output","NgModule","i3","FormGroup","FormControl","FormsModule","ReactiveFormsModule","i2","CommonModule","KeyboardUtil","ifBackspaceOrDelete","event","ifKey","ifRightArrow","ifLeftArrow","ifSpacebar","keys","keysToCheck","split","some","k","key","KeysPipe","transform","value","Object","ɵfac","ɵpipe","type","args","name","NgOtpInputComponent","constructor","keysPipe","config","length","onInputChange","inputControls","Array","componentKey","Math","random","toString","substring","Date","getTime","inputType","_a","_b","isPasswordInput","allowNumbersOnly","ngOnInit","otpForm","index","addControl","getControlName","valueChanges","subscribe","v","controls","forEach","val","setValue","rebuildValue","ngAfterViewInit","disableAutoFocus","containerItem","document","getElementById","ele","getElementsByClassName","focus","idx","onKeyDown","$event","inputIdx","preventDefault","onInput","newVal","currentVal","target","validateNumber","stopPropagation","onKeyUp","nextInputId","appendKey","prevInputId","setSelected","ifValidKeyCode","test","id","eleId","focusTo","setSelectionRange","setTimeout","inp","isMobile","navigator","userAgent","allowKeyCodes","includes","keyCode","isNaN","reset","replace","from","c","get","indexOfElementToFocus","ctrlVal","isLengthExceed","isCaseTransformEnabled","letterCase","toLocaleLowerCase","transformedVal","toUpperCase","toLowerCase","formCtrl","emit","handlePaste","e","clipboardData","window","pastedData","getData","ɵcmp","NgIf","NgStyle","NgForOf","DefaultValueAccessor","PatternValidator","NgControlStatus","FormControlDirective","selector","templateUrl","styleUrls","NgOtpInputModule","ɵmod","ɵinj","imports","declarations","exports","providers","Config","NgOtpInputConfig"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}