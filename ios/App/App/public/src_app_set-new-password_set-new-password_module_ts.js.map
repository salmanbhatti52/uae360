{"version":3,"file":"src_app_set-new-password_set-new-password_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;IAIaK,UAAU,SAAVA,UAAU;EAGrBC,YAAoBC,IAApB,EACSC,eADT,EAESC,WAFT,EAEsC;IAFlB;IACX;IACA;IAHT,eAAc,8BAAd;EAG2C;;EAE3CC,WAAW,CAACC,MAAD,EAASC,IAAT,EAAa;IACtB,IAAIC,MAAJ;IAEAA,MAAM,GAAG,IAAIX,6DAAJ,CAAgB;MACvB,gBAAiB;IADM,CAAhB,CAAT;IAIA,OAAO,KAAKK,IAAL,CAAUO,IAAV,CAAe,GAAG,KAAKC,OAAO,IAAIJ,MAAM,EAAxC,EAA2CK,IAAI,CAACC,SAAL,CAAeL,IAAf,CAA3C,EAAiE;MACtEM,OAAO,EAACL;IAD8D,CAAjE,CAAP;EAID;;EAEDM,OAAO,CAACR,MAAD,EAAO;IACZ,IAAIE,MAAJ;IAEAA,MAAM,GAAG,IAAIX,6DAAJ,CAAgB;MACvB,gBAAiB;IADM,CAAhB,CAAT;IAIA,OAAO,KAAKK,IAAL,CAAUa,GAAV,CAAc,GAAG,KAAKL,OAAO,IAAIJ,MAAM,EAAvC,EAA2C;MAChDO,OAAO,EAACL;IADwC,CAA3C,CAAP;EAGD;;EAGKQ,YAAY,CAACC,QAAD,EAAS;IAAA;;IAAA;MACzB,MAAMC,KAAK,SAAS,KAAI,CAACf,eAAL,CAAqBgB,MAArB,CAA4B;QAC9CC,OAAO,EAACH,QADsC;QAE9CI,QAAQ,EAAC;MAFqC,CAA5B,CAApB;MAIAH,KAAK,CAACI,OAAN;IALyB;EAM1B;;EAEKC,WAAW;IAAA;;IAAA;MACf,MAAMC,OAAO,SAAS,MAAI,CAACpB,WAAL,CAAiBe,MAAjB,CAAwB;QAC5CE,QAAQ,EAAC;MADmC,CAAxB,CAAtB;MAGAG,OAAO,CAACF,OAAR;IAJe;EAKhB;;EAEDG,WAAW;IACT,KAAKrB,WAAL,CAAiBsB,OAAjB;EACD;;AAlDoB;;;;;;;;;;AAAV1B,UAAU,sDAHtBL,yDAAU,CAAC;EACVgC,UAAU,EAAE;AADF,CAAD,CAGY,GAAV3B,UAAU,CAAV;;;;;;;;;;;;;;;;;;;;ACP4B;AACc;AAEM;AAE7D,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,sEAAkB;KAC9B;CACF,CAAC;IAMW,+BAA+B,SAA/B,+BAA+B;;AAA/B,+BAA+B;IAJ3C,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,+BAA+B;AAAA;;;;;;;;;;;;;;;;;;;;;;;AChBH;AACM;AACF;AACQ;AACR;AAEuC;AAEvB;IAYhD,wBAAwB,SAAxB,wBAAwB;;AAAxB,wBAAwB;IAVpC,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,6FAA+B;YAC/B,+DAAmB;SACpB;QACD,YAAY,EAAE,CAAC,sEAAkB,CAAC;KACnC,CAAC;GACW,wBAAwB;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBa;AACP;AACsC;AACxC;AACY;IAMxC,kBAAkB,SAAlB,kBAAkB;IAQ7B,YAAmB,QAAiB,EAC3B,MAAa,EACb,GAAc,EACb,EAAc;QAHL,aAAQ,GAAR,QAAQ,CAAS;QAC3B,WAAM,GAAN,MAAM,CAAO;QACb,QAAG,GAAH,GAAG,CAAW;QACb,OAAE,GAAF,EAAE,CAAY;QATxB,cAAS,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAE9C,iBAAY,GAAC,KAAK,CAAC;QACnB,YAAO,GAAC,UAAU,CAAC;QACnB,qBAAgB,GAAE,KAAK,CAAC;QACxB,yBAAoB,GAAE,KAAK,CAAC;QAKxB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEH,UAAU;QACR,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC3B,MAAM,EAAE,CAAC,EAAE,EAAC,+DAAmB,CAAC;YAChC,WAAW,EAAE,CAAC,EAAE,EAAC,+DAAmB,CAAC;SAEtC,CAAC,CAAC;IACL,CAAC;IACD,QAAQ;QACN,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAE9B,CAAC;IACD,MAAM;QACJ,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IACvB,CAAC;IAED,aAAa;QACX,IAAG,IAAI,CAAC,OAAO,IAAI,UAAU,EAAC;YAC5B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;aAAI;YACH,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;YAC1B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;SAC3B;IACH,CAAC;IACD,QAAQ,CAAC,GAAG;QACV,IAAG,GAAG,IAAI,SAAS,EAAC;YAClB,IAAI,CAAC,gBAAgB,GAAE,IAAI,CAAC;YAC5B,IAAI,CAAC,oBAAoB,GAAE,KAAK,CAAC;SAClC;aACI,IAAG,GAAG,IAAI,iBAAiB,EAAC;YAC/B,IAAI,CAAC,gBAAgB,GAAE,KAAK,CAAC;YAC7B,IAAI,CAAC,oBAAoB,GAAE,IAAI,CAAC;SACjC;aACG;SAEH;IACH,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,gBAAgB,GAAE,KAAK,CAAC;QAC7B,IAAI,CAAC,oBAAoB,GAAE,KAAK,CAAC;QACjC,IAAI,IAAI,GAAG;YACT,SAAS,EAAC,IAAI,CAAC,SAAS;YACxB,QAAQ,EAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM;YAClC,gBAAgB,EAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW;SAChD;QACD,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,aAAa,EAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,GAAO,EAAC,EAAE;YAC5D,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,IAAG,GAAG,CAAC,MAAM,IAAI,SAAS,EAAC;gBACzB,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;gBAClC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;aACpC;iBAAK,IAAG,GAAG,CAAC,MAAM,IAAI,OAAO,EAAC;gBAC7B,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACpC;iBAAI;aAEJ;QAEH,CAAC,EAAC,CAAC,GAAG,EAAC,EAAE;YACP,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEnB,CAAC,CAAC;IACJ,CAAC;;;;;;;;AA5EU,kBAAkB;IAL9B,wDAAS,CAAC;QACT,QAAQ,EAAE,sBAAsB;QAChC,6EAA2C;;KAE5C,CAAC;GACW,kBAAkB;AAAA","sources":["./src/app/services/api.service.ts","./src/app/set-new-password/set-new-password-routing.module.ts","./src/app/set-new-password/set-new-password.module.ts","./src/app/set-new-password/set-new-password.page.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ToastController } from '@ionic/angular';\nimport { LoadingController } from '@ionic/angular';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  carDataById:any;\n  baseURL:any = 'https://360uae.eigix.net/api';\n  constructor(private http:HttpClient, \n    public toastController:ToastController,\n    public loadingCtrl:LoadingController) { }\n\n  sendRequest(action, data){\n    let header;\n    \n    header = new HttpHeaders({\n      \"Content-Type\" : \"application/json\"\n    });\n\n    return this.http.post(`${this.baseURL}/${action}`,JSON.stringify(data), {\n      headers:header,\n    });\n\n  }\n\n  getData(action){\n    let header;\n    \n    header = new HttpHeaders({\n      \"Content-Type\" : \"application/json\"\n    });\n\n    return this.http.get(`${this.baseURL}/${action}`, {\n      headers:header,\n    });\n  }\n\n  \n  async presentToast(toastMsg){\n    const toast = await this.toastController.create({\n      message:toastMsg,\n      duration:2000,\n    });\n    toast.present();\n  }\n\n  async showLoading(){\n    const loading = await this.loadingCtrl.create({\n      duration:3000\n    });\n    loading.present();\n  }\n\n  hideLoading(){\n    this.loadingCtrl.dismiss();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SetNewPasswordPage } from './set-new-password.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SetNewPasswordPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SetNewPasswordPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { SetNewPasswordPageRoutingModule } from './set-new-password-routing.module';\n\nimport { SetNewPasswordPage } from './set-new-password.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SetNewPasswordPageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [SetNewPasswordPage]\n})\nexport class SetNewPasswordPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormBuilder ,FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ApiService } from '../services/api.service';\n@Component({\n  selector: 'app-set-new-password',\n  templateUrl: './set-new-password.page.html',\n  styleUrls: ['./set-new-password.page.scss'],\n})\nexport class SetNewPasswordPage implements OnInit {\n  angForm: FormGroup;\n  appUserId = localStorage.getItem('appUserId');\n\n  showPassword=false;\n  getType='password';\n  newPasswordField= false;\n  confirmPasswordField= false;\n  constructor(public location:Location,\n    public router:Router,\n    public api:ApiService,\n    private fb:FormBuilder) {\n      this.createForm();\n    }\n\n  createForm(){\n    this.angForm = this.fb.group({\n      newPwd: ['',Validators.required],\n      cnfrmNewPwd: ['',Validators.required]\n\n    });\n  }\n  ngOnInit() {\n    console.log(this.appUserId);\n    \n  }\n  goBack(){\n    this.location.back();\n  }\n\n  toggleGetType(){\n    if(this.getType == 'password'){\n      this.getType = 'text';\n      this.showPassword = true;\n    }else{\n      this.getType = 'password';\n      this.showPassword = false;\n    }\n  }\n  activate(val){\n    if(val == 'new_pwd'){\n      this.newPasswordField= true;\n      this.confirmPasswordField= false;\n    }\n    else if(val == 'confirm_new_pwd'){\n      this.newPasswordField= false;\n      this.confirmPasswordField= true;\n    }\n    else{\n\n    }\n  }\n\n  createPassword(){\n    this.newPasswordField= false;\n    this.confirmPasswordField= false;\n    let data = {\n      appUserId:this.appUserId,\n      password:this.angForm.value.newPwd,\n      confirm_password:this.angForm.value.cnfrmNewPwd\n    }\n    this.api.sendRequest('newPassword',data).subscribe((res:any)=>{\n      console.log(res);\n      if(res.status == 'success'){\n        this.api.presentToast('Success!');\n        this.router.navigate(['/sign-in']);\n      }else if(res.status == 'error'){\n        this.api.presentToast(res.message);\n      }else{\n        \n      }\n      \n    },(err)=>{\n      console.log(err);\n      \n    })\n  }\n}\n"],"names":["Injectable","HttpClient","HttpHeaders","ToastController","LoadingController","ApiService","constructor","http","toastController","loadingCtrl","sendRequest","action","data","header","post","baseURL","JSON","stringify","headers","getData","get","presentToast","toastMsg","toast","create","message","duration","present","showLoading","loading","hideLoading","dismiss","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}