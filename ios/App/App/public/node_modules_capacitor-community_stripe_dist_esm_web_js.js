"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_capacitor-community_stripe_dist_esm_web_js"],{

/***/ 43594:
/*!******************************************************************************!*\
  !*** ./node_modules/@capacitor-community/stripe/dist/esm/shared/platform.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPlatforms": () => (/* binding */ getPlatforms),
/* harmony export */   "isPlatform": () => (/* binding */ isPlatform),
/* harmony export */   "setupPlatforms": () => (/* binding */ setupPlatforms),
/* harmony export */   "testUserAgent": () => (/* binding */ testUserAgent)
/* harmony export */ });
/**
 * @url https://github.com/ionic-team/ionic-framework/blob/main/core/src/utils/platform.ts
 * So `@typescript-eslint/no-explicit-any` `@typescript-eslint/no-non-null-assertion` is disabled here
 */
const getPlatforms = win => setupPlatforms(win);
const isPlatform = (winOrPlatform, platform) => {
  if (typeof winOrPlatform === 'string') {
    platform = winOrPlatform;
    winOrPlatform = undefined;
  }

  return getPlatforms(winOrPlatform).includes(platform);
};
const setupPlatforms = (win = window) => {
  if (typeof win === 'undefined') {
    return [];
  }

  win.Ionic = win.Ionic || {};
  let platforms = win.Ionic.platforms;

  if (platforms == null) {
    platforms = win.Ionic.platforms = detectPlatforms(win);
    platforms.forEach(p => win.document.documentElement.classList.add(`plt-${p}`));
  }

  return platforms;
};

const detectPlatforms = win => Object.keys(PLATFORMS_MAP).filter(p => PLATFORMS_MAP[p](win));

const isMobileWeb = win => isMobile(win) && !isHybrid(win);

const isIpad = win => {
  // iOS 12 and below
  if (testUserAgent(win, /iPad/i)) {
    return true;
  } // iOS 13+


  if (testUserAgent(win, /Macintosh/i) && isMobile(win)) {
    return true;
  }

  return false;
};

const isIphone = win => testUserAgent(win, /iPhone/i);

const isIOS = win => testUserAgent(win, /iPhone|iPod/i) || isIpad(win);

const isAndroid = win => testUserAgent(win, /android|sink/i);

const isAndroidTablet = win => {
  return isAndroid(win) && !testUserAgent(win, /mobile/i);
};

const isPhablet = win => {
  const width = win.innerWidth;
  const height = win.innerHeight;
  const smallest = Math.min(width, height);
  const largest = Math.max(width, height);
  return smallest > 390 && smallest < 520 && largest > 620 && largest < 800;
};

const isTablet = win => {
  const width = win.innerWidth;
  const height = win.innerHeight;
  const smallest = Math.min(width, height);
  const largest = Math.max(width, height);
  return isIpad(win) || isAndroidTablet(win) || smallest > 460 && smallest < 820 && largest > 780 && largest < 1400;
};

const isMobile = win => matchMedia(win, '(any-pointer:coarse)');

const isDesktop = win => !isMobile(win);

const isHybrid = win => isCordova(win) || isCapacitorNative(win);

const isCordova = win => !!(win['cordova'] || win['phonegap'] || win['PhoneGap']);

const isCapacitorNative = win => {
  const capacitor = win['Capacitor'];
  return !!(capacitor === null || capacitor === void 0 ? void 0 : capacitor.isNative);
};

const isElectron = win => testUserAgent(win, /electron/i);

const isPWA = win => !!(win.matchMedia('(display-mode: standalone)').matches || win.navigator.standalone);

const testUserAgent = (win, expr) => expr.test(win.navigator.userAgent);

const matchMedia = (win, query) => win.matchMedia(query).matches;

const PLATFORMS_MAP = {
  'ipad': isIpad,
  'iphone': isIphone,
  'ios': isIOS,
  'android': isAndroid,
  'phablet': isPhablet,
  'tablet': isTablet,
  'cordova': isCordova,
  'capacitor': isCapacitorNative,
  'electron': isElectron,
  'pwa': isPWA,
  'mobile': isMobile,
  'mobileweb': isMobileWeb,
  'desktop': isDesktop,
  'hybrid': isHybrid
};

/***/ }),

/***/ 48802:
/*!******************************************************************!*\
  !*** ./node_modules/@capacitor-community/stripe/dist/esm/web.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StripeWeb": () => (/* binding */ StripeWeb)
/* harmony export */ });
/* harmony import */ var D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/core */ 26549);
/* harmony import */ var _definitions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./definitions */ 53073);
/* harmony import */ var _shared_platform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/platform */ 43594);




class StripeWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_1__.WebPlugin {
  constructor() {
    super({
      name: 'Stripe',
      platforms: ['web']
    });
  }

  initialize(options) {
    var _this = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (typeof options.publishableKey !== 'string' || options.publishableKey.trim().length === 0) {
        throw new Error('you must provide a valid key');
      }

      _this.publishableKey = options.publishableKey;

      if (options.stripeAccount) {
        _this.stripeAccount = options.stripeAccount;
      }
    })();
  }

  createPaymentSheet(options) {
    var _this2 = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;

      if (!_this2.publishableKey) {
        _this2.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentSheetEventsEnum.FailedToLoad, null);

        return;
      }

      _this2.paymentSheet = document.createElement('stripe-payment-sheet');
      (_a = document.querySelector('body')) === null || _a === void 0 ? void 0 : _a.appendChild(_this2.paymentSheet);
      yield customElements.whenDefined('stripe-payment-sheet');
      _this2.paymentSheet.publishableKey = _this2.publishableKey;

      if (_this2.stripeAccount) {
        _this2.paymentSheet.stripeAccount = _this2.stripeAccount;
      }

      _this2.paymentSheet.applicationName = '@capacitor-community/stripe';
      _this2.paymentSheet.intentClientSecret = options.paymentIntentClientSecret;
      _this2.paymentSheet.intentType = 'payment';

      if (options.withZipCode !== undefined) {
        _this2.paymentSheet.zip = options.withZipCode;
      }

      _this2.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentSheetEventsEnum.Loaded, null);
    })();
  }

  presentPaymentSheet() {
    var _this3 = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this3.paymentSheet) {
        throw new Error();
      }

      const props = yield _this3.paymentSheet.present();

      if (props === undefined) {
        _this3.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentSheetEventsEnum.Canceled, null);

        return {
          paymentResult: _definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentSheetEventsEnum.Canceled
        };
      }

      const {
        detail: {
          stripe,
          cardNumberElement
        }
      } = props;
      const result = yield stripe.createPaymentMethod({
        type: 'card',
        card: cardNumberElement
      });

      _this3.paymentSheet.updateProgress('success');

      _this3.paymentSheet.remove();

      if (result.error !== undefined) {
        _this3.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentSheetEventsEnum.Failed, null);

        return {
          paymentResult: _definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentSheetEventsEnum.Failed
        };
      }

      _this3.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentSheetEventsEnum.Completed, null);

      return {
        paymentResult: _definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentSheetEventsEnum.Completed
      };
    })();
  }

  createPaymentFlow(options) {
    var _this4 = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;

      if (!_this4.publishableKey) {
        _this4.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentFlowEventsEnum.FailedToLoad, null);

        return;
      }

      _this4.paymentSheet = document.createElement('stripe-payment-sheet');
      (_a = document.querySelector('body')) === null || _a === void 0 ? void 0 : _a.appendChild(_this4.paymentSheet);
      yield customElements.whenDefined('stripe-payment-sheet');
      _this4.paymentSheet.publishableKey = _this4.publishableKey;

      if (_this4.stripeAccount) {
        _this4.paymentSheet.stripeAccount = _this4.stripeAccount;
      }

      _this4.paymentSheet.applicationName = '@capacitor-community/stripe'; // eslint-disable-next-line no-prototype-builtins

      if (options.hasOwnProperty('paymentIntentClientSecret')) {
        _this4.paymentSheet.intentType = 'payment';
        _this4.paymentSheet.intentClientSecret = options.paymentIntentClientSecret;
      } else {
        _this4.paymentSheet.intentType = 'setup';
        _this4.paymentSheet.intentClientSecret = options.setupIntentClientSecret;
      }

      if (options.withZipCode !== undefined) {
        _this4.paymentSheet.zip = options.withZipCode;
      }

      if ((0,_shared_platform__WEBPACK_IMPORTED_MODULE_3__.isPlatform)(window, 'ios')) {
        _this4.paymentSheet.buttonLabel = 'Add card';
        _this4.paymentSheet.sheetTitle = 'Add a card';
      } else {
        _this4.paymentSheet.buttonLabel = 'Add';
      }

      _this4.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentFlowEventsEnum.Loaded, null);
    })();
  }

  presentPaymentFlow() {
    var _this5 = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this5.paymentSheet) {
        throw new Error();
      }

      _this5.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentFlowEventsEnum.Opened, null);

      const props = yield _this5.paymentSheet.present().catch(() => undefined);

      if (props === undefined) {
        _this5.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentFlowEventsEnum.Canceled, null);

        throw new Error();
      }

      const {
        detail: {
          stripe,
          cardNumberElement
        }
      } = props;
      const {
        token
      } = yield stripe.createToken(cardNumberElement);

      if (token === undefined || token.card === undefined) {
        throw new Error();
      }

      _this5.flowStripe = stripe;
      _this5.flowCardNumberElement = cardNumberElement;

      _this5.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentFlowEventsEnum.Created, {
        cardNumber: token.card.last4
      });

      return {
        cardNumber: token.card.last4
      };
    })();
  }

  confirmPaymentFlow() {
    var _this6 = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this6.paymentSheet || !_this6.flowStripe || !_this6.flowCardNumberElement) {
        throw new Error();
      }

      const result = yield _this6.flowStripe.createPaymentMethod({
        type: 'card',
        card: _this6.flowCardNumberElement
      });

      if (result.error !== undefined) {
        _this6.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentFlowEventsEnum.Failed, null);
      }

      _this6.paymentSheet.updateProgress('success');

      _this6.paymentSheet.remove();

      _this6.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentFlowEventsEnum.Completed, null);

      return {
        paymentResult: _definitions__WEBPACK_IMPORTED_MODULE_2__.PaymentFlowEventsEnum.Completed
      };
    })();
  }

  isApplePayAvailable() {
    return this.isAvailable('applePay');
  }

  createApplePay(createApplePayOption) {
    var _this7 = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this7.publishableKey) {
        _this7.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.ApplePayEventsEnum.FailedToLoad, null);

        return;
      }

      _this7.requestApplePay = yield _this7.createPaymentRequestButton();
      _this7.requestApplePayOptions = createApplePayOption;

      _this7.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.ApplePayEventsEnum.Loaded, null);
    })();
  }

  presentApplePay() {
    return this.presentPaymentRequestButton('applePay', this.requestApplePay, this.requestApplePayOptions, _definitions__WEBPACK_IMPORTED_MODULE_2__.ApplePayEventsEnum);
  }

  isGooglePayAvailable() {
    return this.isAvailable('googlePay');
  }

  createGooglePay(createGooglePayOption) {
    var _this8 = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this8.publishableKey) {
        _this8.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.GooglePayEventsEnum.FailedToLoad, null);

        return;
      }

      _this8.requestGooglePay = yield _this8.createPaymentRequestButton();
      _this8.requestGooglePayOptions = createGooglePayOption;

      _this8.notifyListeners(_definitions__WEBPACK_IMPORTED_MODULE_2__.GooglePayEventsEnum.Loaded, null);
    })();
  }

  presentGooglePay() {
    return this.presentPaymentRequestButton('googlePay', this.requestGooglePay, this.requestGooglePayOptions, _definitions__WEBPACK_IMPORTED_MODULE_2__.GooglePayEventsEnum);
  }

  isAvailable(type) {
    var _this9 = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;

      const requestButton = document.createElement('stripe-payment-request-button');
      requestButton.id = `isAvailable-${type}`;
      (_a = document.querySelector('body')) === null || _a === void 0 ? void 0 : _a.appendChild(requestButton);
      yield customElements.whenDefined('stripe-payment-request-button');

      if (_this9.publishableKey) {
        requestButton.publishableKey = _this9.publishableKey;
      }

      if (_this9.stripeAccount) {
        requestButton.stripeAccount = _this9.stripeAccount;
      }

      requestButton.applicationName = '@capacitor-community/stripe';
      return yield requestButton.isAvailable(type).finally(() => requestButton.remove());
    })();
  }

  createPaymentRequestButton() {
    var _this10 = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;

      const requestButton = document.createElement('stripe-payment-request-button');
      (_a = document.querySelector('body')) === null || _a === void 0 ? void 0 : _a.appendChild(requestButton);
      yield customElements.whenDefined('stripe-payment-request-button');

      if (_this10.publishableKey) {
        requestButton.publishableKey = _this10.publishableKey;
      }

      if (_this10.stripeAccount) {
        requestButton.stripeAccount = _this10.stripeAccount;
      }

      requestButton.applicationName = '@capacitor-community/stripe';
      return requestButton;
    })();
  }

  presentPaymentRequestButton(type, requestButton, requestButtonOptions, EventsEnum) {
    var _this11 = this;

    return (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // eslint-disable-next-line no-async-promise-executor
      return new Promise( /*#__PURE__*/function () {
        var _ref = (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (resolve) {
          if (requestButton === undefined || requestButtonOptions === undefined || _this11.publishableKey === undefined) {
            _this11.notifyListeners(EventsEnum.Failed, null);

            return resolve({
              paymentResult: EventsEnum.Failed
            });
          }

          yield requestButton.setPaymentRequestOption({
            country: requestButtonOptions.countryCode.toUpperCase(),
            currency: requestButtonOptions.currency.toLowerCase(),
            total: requestButtonOptions.paymentSummaryItems[requestButtonOptions.paymentSummaryItems.length - 1],
            disableWallets: type === 'applePay' ? ['googlePay', 'browserCard'] : ['applePay', 'browserCard'],
            requestPayerName: true,
            requestPayerEmail: true
          }); // await this.requestButton.setPaymentRequestShippingAddressEventHandler(async (event, stripe) => {});

          const intentClientSecret = requestButtonOptions.paymentIntentClientSecret;
          yield requestButton.setPaymentMethodEventHandler( /*#__PURE__*/function () {
            var _ref2 = (0,D_Github_Projects_360UAE_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (event, stripe) {
              const {
                paymentIntent,
                error: confirmError
              } = yield stripe.confirmCardPayment(intentClientSecret, {
                payment_method: event.paymentMethod.id
              }, {
                handleActions: false
              });

              if (confirmError) {
                event.complete('fail');

                _this11.notifyListeners(EventsEnum.Failed, confirmError);

                return resolve({
                  paymentResult: EventsEnum.Failed
                });
              }

              if ((paymentIntent === null || paymentIntent === void 0 ? void 0 : paymentIntent.status) === 'requires_action') {
                const {
                  error: confirmError
                } = yield stripe.confirmCardPayment(intentClientSecret);

                if (confirmError) {
                  event.complete('fail');

                  _this11.notifyListeners(EventsEnum.Failed, confirmError);

                  return resolve({
                    paymentResult: EventsEnum.Failed
                  });
                }
              }

              event.complete('success');

              _this11.notifyListeners(EventsEnum.Completed, null);

              return resolve({
                paymentResult: EventsEnum.Completed
              });
            });

            return function (_x2, _x3) {
              return _ref2.apply(this, arguments);
            };
          }());
          yield requestButton.initStripe(_this11.publishableKey, {
            stripeAccount: _this11.stripeAccount,
            showButton: false
          });
        });

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    })();
  }

}

/***/ })

}]);
//# sourceMappingURL=node_modules_capacitor-community_stripe_dist_esm_web_js.js.map